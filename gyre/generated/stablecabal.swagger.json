{
  "swagger": "2.0",
  "info": {
    "title": "generation.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "GenerationService"
    },
    {
      "name": "EnginesService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/grpcgateway/asyncCancel": {
      "post": {
        "summary": "AsyncCancel cancels a generation that is currently in progress\nand discards any results that have not yet been returned by a call to AsyncResult.",
        "operationId": "AsyncCancel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AsyncCancelAnswer"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "requestId",
            "description": "The request_id for the original Request.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "asyncHandle",
            "description": "The opaque handle needed to refer to the same AsyncGenerate request.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "GenerationService"
        ]
      }
    },
    "/grpcgateway/asyncGenerate": {
      "post": {
        "summary": "AsyncGenerate starts an asynchronous generation",
        "description": "The passed Request is the same as to Generate. However this method\nwill return immediately, returning a handle that can be used to get\nany results of the generation created so far or cancel it.",
        "operationId": "AsyncGenerate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AsyncHandle"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "engineId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "requestId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "requestedType",
            "description": " - ARTIFACT_DEPTH: Deprecated - use HINT_IMAGE with an image control type of \"depth\" instead\n - ARTIFACT_HINT_IMAGE: Controlnet or T2I input image",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ARTIFACT_NONE",
              "ARTIFACT_IMAGE",
              "ARTIFACT_VIDEO",
              "ARTIFACT_TEXT",
              "ARTIFACT_TOKENS",
              "ARTIFACT_EMBEDDING",
              "ARTIFACT_CLASSIFICATIONS",
              "ARTIFACT_MASK",
              "ARTIFACT_LATENT",
              "ARTIFACT_TENSOR",
              "ARTIFACT_LORA",
              "ARTIFACT_DEPTH",
              "ARTIFACT_TOKEN_EMBEDDING",
              "ARTIFACT_HINT_IMAGE"
            ],
            "default": "ARTIFACT_NONE"
          },
          {
            "name": "image.height",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "image.width",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "image.seed",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "image.samples",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "image.steps",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "image.transform.diffusion",
            "description": " - SAMPLER_DPMSOLVERPP_2S_ANCESTRAL: Next three deprecated - use the official values above",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SAMPLER_DDIM",
              "SAMPLER_DDPM",
              "SAMPLER_K_EULER",
              "SAMPLER_K_EULER_ANCESTRAL",
              "SAMPLER_K_HEUN",
              "SAMPLER_K_DPM_2",
              "SAMPLER_K_DPM_2_ANCESTRAL",
              "SAMPLER_K_LMS",
              "SAMPLER_K_DPMPP_2S_ANCESTRAL",
              "SAMPLER_K_DPMPP_2M",
              "SAMPLER_K_DPMPP_SDE",
              "SAMPLER_DPMSOLVERPP_1ORDER",
              "SAMPLER_DPMSOLVERPP_2ORDER",
              "SAMPLER_DPMSOLVERPP_3ORDER",
              "SAMPLER_DPM_FAST",
              "SAMPLER_DPM_ADAPTIVE",
              "SAMPLER_DPMSOLVERPP_2S_ANCESTRAL",
              "SAMPLER_DPMSOLVERPP_SDE",
              "SAMPLER_DPMSOLVERPP_2M"
            ],
            "default": "SAMPLER_DDIM"
          },
          {
            "name": "image.transform.upscaler",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UPSCALER_RGB",
              "UPSCALER_GFPGAN",
              "UPSCALER_ESRGAN"
            ],
            "default": "UPSCALER_RGB"
          },
          {
            "name": "image.maskedAreaInit",
            "description": "defaults to MASKED_AREA_INIT_ZERO",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "MASKED_AREA_INIT_ZERO",
              "MASKED_AREA_INIT_RANDOM",
              "MASKED_AREA_INIT_ORIGINAL"
            ],
            "default": "MASKED_AREA_INIT_ZERO"
          },
          {
            "name": "image.weightMethod",
            "description": "defaults to TEXT_ENCODER",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "TEXT_ENCODER",
              "CROSS_ATTENTION"
            ],
            "default": "TEXT_ENCODER"
          },
          {
            "name": "image.quantize",
            "description": "defaults to true",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "image.hires.enable",
            "description": "Should it be enabled at all",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "image.hires.oosFraction",
            "description": "How out-of-square will we allow the fixed area to be, 0...1",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "float"
          },
          {
            "name": "image.tiling",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "image.tilingX",
            "description": "The specific axis override tiling if both set",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "image.tilingY",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "classifier.realizedAction",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ACTION_PASSTHROUGH",
              "ACTION_REGENERATE_DUPLICATE",
              "ACTION_REGENERATE",
              "ACTION_OBFUSCATE_DUPLICATE",
              "ACTION_OBFUSCATE",
              "ACTION_DISCARD"
            ],
            "default": "ACTION_PASSTHROUGH"
          },
          {
            "name": "asset.action",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ASSET_PUT",
              "ASSET_GET",
              "ASSET_DELETE"
            ],
            "default": "ASSET_PUT"
          },
          {
            "name": "asset.projectId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "asset.use",
            "description": " - ASSET_USE_UNDEFINED: Asset does not have use defined\n - ASSET_USE_INPUT: Asset is used as an input for the project\n - ASSET_USE_OUTPUT: Asset is an output from the project\n - ASSET_USE_INTERMEDIATE: Asset is an output from an intermediate step of the project\n - ASSET_USE_PROJECT: Asset is used as the project file for the project",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ASSET_USE_UNDEFINED",
              "ASSET_USE_INPUT",
              "ASSET_USE_OUTPUT",
              "ASSET_USE_INTERMEDIATE",
              "ASSET_USE_PROJECT"
            ],
            "default": "ASSET_USE_UNDEFINED"
          },
          {
            "name": "conditioner.vectorAdjustPrior",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "conditioner.conditioner.architecture",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "MODEL_ARCHITECTURE_NONE",
              "MODEL_ARCHITECTURE_CLIP_VIT",
              "MODEL_ARCHITECTURE_CLIP_RESNET",
              "MODEL_ARCHITECTURE_LDM"
            ],
            "default": "MODEL_ARCHITECTURE_NONE"
          },
          {
            "name": "conditioner.conditioner.publisher",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "conditioner.conditioner.dataset",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "conditioner.conditioner.version",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "float"
          },
          {
            "name": "conditioner.conditioner.semanticVersion",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "conditioner.conditioner.alias",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "accept",
            "description": "The accept header, in the same format as for http requests. Not guaranteed to be obeyed by server.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "GenerationService"
        ]
      }
    },
    "/grpcgateway/asyncResult": {
      "post": {
        "summary": "AsyncResult gets and results so far for an asynchronous generation",
        "description": "You can call this multiple times. Each time you call it, you will get\nany results that are ready that have not been returned before.\n(Note that this \"consumes\" the ready results - they will not be returned again).\n\nAny generated results will eventually (default: after 10 minutes) be discarded\nif they are not taken by a call to this method.",
        "operationId": "AsyncResult",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AsyncAnswer"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "requestId",
            "description": "The request_id for the original Request.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "asyncHandle",
            "description": "The opaque handle needed to refer to the same AsyncGenerate request.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "GenerationService"
        ]
      }
    },
    "/grpcgateway/engines": {
      "get": {
        "operationId": "ListEngines",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Engines"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "taskGroup",
            "description": "Empty",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "GENERATE",
              "UPSCALE",
              "UTILITY",
              "HINTER"
            ],
            "default": "GENERATE"
          }
        ],
        "tags": [
          "EnginesService"
        ]
      }
    },
    "/grpcgateway/generate": {
      "post": {
        "operationId": "Generate",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/Answer"
                },
                "error": {
                  "$ref": "#/definitions/Status"
                }
              },
              "title": "Stream result of Answer"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        },
        "parameters": [
          {
            "name": "engineId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "requestId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "requestedType",
            "description": " - ARTIFACT_DEPTH: Deprecated - use HINT_IMAGE with an image control type of \"depth\" instead\n - ARTIFACT_HINT_IMAGE: Controlnet or T2I input image",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ARTIFACT_NONE",
              "ARTIFACT_IMAGE",
              "ARTIFACT_VIDEO",
              "ARTIFACT_TEXT",
              "ARTIFACT_TOKENS",
              "ARTIFACT_EMBEDDING",
              "ARTIFACT_CLASSIFICATIONS",
              "ARTIFACT_MASK",
              "ARTIFACT_LATENT",
              "ARTIFACT_TENSOR",
              "ARTIFACT_LORA",
              "ARTIFACT_DEPTH",
              "ARTIFACT_TOKEN_EMBEDDING",
              "ARTIFACT_HINT_IMAGE"
            ],
            "default": "ARTIFACT_NONE"
          },
          {
            "name": "image.height",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "image.width",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "image.seed",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "image.samples",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "image.steps",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "image.transform.diffusion",
            "description": " - SAMPLER_DPMSOLVERPP_2S_ANCESTRAL: Next three deprecated - use the official values above",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SAMPLER_DDIM",
              "SAMPLER_DDPM",
              "SAMPLER_K_EULER",
              "SAMPLER_K_EULER_ANCESTRAL",
              "SAMPLER_K_HEUN",
              "SAMPLER_K_DPM_2",
              "SAMPLER_K_DPM_2_ANCESTRAL",
              "SAMPLER_K_LMS",
              "SAMPLER_K_DPMPP_2S_ANCESTRAL",
              "SAMPLER_K_DPMPP_2M",
              "SAMPLER_K_DPMPP_SDE",
              "SAMPLER_DPMSOLVERPP_1ORDER",
              "SAMPLER_DPMSOLVERPP_2ORDER",
              "SAMPLER_DPMSOLVERPP_3ORDER",
              "SAMPLER_DPM_FAST",
              "SAMPLER_DPM_ADAPTIVE",
              "SAMPLER_DPMSOLVERPP_2S_ANCESTRAL",
              "SAMPLER_DPMSOLVERPP_SDE",
              "SAMPLER_DPMSOLVERPP_2M"
            ],
            "default": "SAMPLER_DDIM"
          },
          {
            "name": "image.transform.upscaler",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UPSCALER_RGB",
              "UPSCALER_GFPGAN",
              "UPSCALER_ESRGAN"
            ],
            "default": "UPSCALER_RGB"
          },
          {
            "name": "image.maskedAreaInit",
            "description": "defaults to MASKED_AREA_INIT_ZERO",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "MASKED_AREA_INIT_ZERO",
              "MASKED_AREA_INIT_RANDOM",
              "MASKED_AREA_INIT_ORIGINAL"
            ],
            "default": "MASKED_AREA_INIT_ZERO"
          },
          {
            "name": "image.weightMethod",
            "description": "defaults to TEXT_ENCODER",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "TEXT_ENCODER",
              "CROSS_ATTENTION"
            ],
            "default": "TEXT_ENCODER"
          },
          {
            "name": "image.quantize",
            "description": "defaults to true",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "image.hires.enable",
            "description": "Should it be enabled at all",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "image.hires.oosFraction",
            "description": "How out-of-square will we allow the fixed area to be, 0...1",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "float"
          },
          {
            "name": "image.tiling",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "image.tilingX",
            "description": "The specific axis override tiling if both set",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "image.tilingY",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "classifier.realizedAction",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ACTION_PASSTHROUGH",
              "ACTION_REGENERATE_DUPLICATE",
              "ACTION_REGENERATE",
              "ACTION_OBFUSCATE_DUPLICATE",
              "ACTION_OBFUSCATE",
              "ACTION_DISCARD"
            ],
            "default": "ACTION_PASSTHROUGH"
          },
          {
            "name": "asset.action",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ASSET_PUT",
              "ASSET_GET",
              "ASSET_DELETE"
            ],
            "default": "ASSET_PUT"
          },
          {
            "name": "asset.projectId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "asset.use",
            "description": " - ASSET_USE_UNDEFINED: Asset does not have use defined\n - ASSET_USE_INPUT: Asset is used as an input for the project\n - ASSET_USE_OUTPUT: Asset is an output from the project\n - ASSET_USE_INTERMEDIATE: Asset is an output from an intermediate step of the project\n - ASSET_USE_PROJECT: Asset is used as the project file for the project",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ASSET_USE_UNDEFINED",
              "ASSET_USE_INPUT",
              "ASSET_USE_OUTPUT",
              "ASSET_USE_INTERMEDIATE",
              "ASSET_USE_PROJECT"
            ],
            "default": "ASSET_USE_UNDEFINED"
          },
          {
            "name": "conditioner.vectorAdjustPrior",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "conditioner.conditioner.architecture",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "MODEL_ARCHITECTURE_NONE",
              "MODEL_ARCHITECTURE_CLIP_VIT",
              "MODEL_ARCHITECTURE_CLIP_RESNET",
              "MODEL_ARCHITECTURE_LDM"
            ],
            "default": "MODEL_ARCHITECTURE_NONE"
          },
          {
            "name": "conditioner.conditioner.publisher",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "conditioner.conditioner.dataset",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "conditioner.conditioner.version",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "float"
          },
          {
            "name": "conditioner.conditioner.semanticVersion",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "conditioner.conditioner.alias",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "accept",
            "description": "The accept header, in the same format as for http requests. Not guaranteed to be obeyed by server.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "GenerationService"
        ]
      }
    }
  },
  "definitions": {
    "Action": {
      "type": "string",
      "enum": [
        "ACTION_PASSTHROUGH",
        "ACTION_REGENERATE_DUPLICATE",
        "ACTION_REGENERATE",
        "ACTION_OBFUSCATE_DUPLICATE",
        "ACTION_OBFUSCATE",
        "ACTION_DISCARD"
      ],
      "default": "ACTION_PASSTHROUGH"
    },
    "Answer": {
      "type": "object",
      "properties": {
        "answerId": {
          "type": "string"
        },
        "requestId": {
          "type": "string"
        },
        "received": {
          "type": "string",
          "format": "uint64"
        },
        "created": {
          "type": "string",
          "format": "uint64"
        },
        "meta": {
          "$ref": "#/definitions/AnswerMeta"
        },
        "artifacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Artifact"
          }
        }
      },
      "description": "An Answer is a response to a Request. It is a set of Artifacts, which can be\nof any type and forwarded to the client or the next stage."
    },
    "AnswerMeta": {
      "type": "object",
      "properties": {
        "gpuId": {
          "type": "string"
        },
        "cpuId": {
          "type": "string"
        },
        "nodeId": {
          "type": "string"
        },
        "engineId": {
          "type": "string"
        }
      },
      "description": "AnswerMeta is a set of metadata about an answer, usually the operating\nenvironment."
    },
    "Any": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "Artifact": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "type": {
          "$ref": "#/definitions/ArtifactType"
        },
        "mime": {
          "type": "string",
          "title": "MIME type identifier, e.g. \"image/png\""
        },
        "magic": {
          "type": "string",
          "title": "Magic number, e.g. \"PNG\""
        },
        "binary": {
          "type": "string",
          "format": "byte",
          "title": "Binary data, e.g. PNG image"
        },
        "text": {
          "type": "string",
          "title": "Text data, e.g. text prompt"
        },
        "tokens": {
          "$ref": "#/definitions/Tokens",
          "title": "Tokenized text data, e.g. GPT tokens"
        },
        "classifier": {
          "$ref": "#/definitions/ClassifierParameters"
        },
        "tensor": {
          "$ref": "#/definitions/Tensor",
          "title": "torch.Tensor:"
        },
        "ref": {
          "$ref": "#/definitions/ArtifactReference",
          "description": "A reference to a previous Artifact",
          "title": "RGB tensor (C,H,W)\n   VAE latent (C,H//8,W//8, assuming VAE-f8)"
        },
        "url": {
          "type": "string",
          "title": "A url (which must be allowed by the server)"
        },
        "safetensors": {
          "$ref": "#/definitions/Safetensors",
          "title": "A safetensors format set of tensors and metadata"
        },
        "cacheId": {
          "type": "string",
          "title": "An ID to load from cache (previously set with cache_info)"
        },
        "lora": {
          "$ref": "#/definitions/Lora",
          "title": "A Lora embedding - deprecated, use safetensors + named_weighs"
        },
        "tokenEmbedding": {
          "$ref": "#/definitions/TokenEmbedding",
          "title": "A textual inversion embedding or similar - deprecated, use safetensors + token_overrides"
        },
        "index": {
          "type": "integer",
          "format": "int64",
          "title": "Index of this artifact in input/output list"
        },
        "finishReason": {
          "$ref": "#/definitions/FinishReason",
          "title": "Reason for finishing, if applicable"
        },
        "seed": {
          "type": "integer",
          "format": "int64",
          "title": "Seed used to generate this artifact"
        },
        "uuid": {
          "type": "string",
          "title": "UUIDv4 of the artifact, used for asset lookup"
        },
        "size": {
          "type": "string",
          "format": "uint64",
          "title": "Size of the artifact in bytes"
        },
        "adjustments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImageAdjustment"
          },
          "title": "Adjustments to this image / mask before generation"
        },
        "postAdjustments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImageAdjustment"
          },
          "title": "Adjustments to this image / mask after generation \n(primarily for adjusting mask prior to re-applying image in outpaint)"
        },
        "hintImageType": {
          "type": "string",
          "title": "Indicate the sort of control for image types"
        },
        "cacheControl": {
          "$ref": "#/definitions/CacheControl"
        }
      },
      "description": "A tangible Artifact, such as an image, video, or text that is used for input\nor output."
    },
    "ArtifactReference": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "uuid": {
          "type": "string"
        },
        "stage": {
          "$ref": "#/definitions/ArtifactStage"
        }
      }
    },
    "ArtifactStage": {
      "type": "string",
      "enum": [
        "ARTIFACT_BEFORE_ADJUSTMENTS",
        "ARTIFACT_AFTER_ADJUSTMENTS",
        "ARTIFACT_AFTER_POSTADJUSTMENTS"
      ],
      "default": "ARTIFACT_BEFORE_ADJUSTMENTS"
    },
    "ArtifactType": {
      "type": "string",
      "enum": [
        "ARTIFACT_NONE",
        "ARTIFACT_IMAGE",
        "ARTIFACT_VIDEO",
        "ARTIFACT_TEXT",
        "ARTIFACT_TOKENS",
        "ARTIFACT_EMBEDDING",
        "ARTIFACT_CLASSIFICATIONS",
        "ARTIFACT_MASK",
        "ARTIFACT_LATENT",
        "ARTIFACT_TENSOR",
        "ARTIFACT_LORA",
        "ARTIFACT_DEPTH",
        "ARTIFACT_TOKEN_EMBEDDING",
        "ARTIFACT_HINT_IMAGE"
      ],
      "default": "ARTIFACT_NONE",
      "title": "- ARTIFACT_DEPTH: Deprecated - use HINT_IMAGE with an image control type of \"depth\" instead\n - ARTIFACT_HINT_IMAGE: Controlnet or T2I input image"
    },
    "AssetAction": {
      "type": "string",
      "enum": [
        "ASSET_PUT",
        "ASSET_GET",
        "ASSET_DELETE"
      ],
      "default": "ASSET_PUT"
    },
    "AssetParameters": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/AssetAction"
        },
        "projectId": {
          "type": "string"
        },
        "use": {
          "$ref": "#/definitions/AssetUse"
        }
      }
    },
    "AssetUse": {
      "type": "string",
      "enum": [
        "ASSET_USE_UNDEFINED",
        "ASSET_USE_INPUT",
        "ASSET_USE_OUTPUT",
        "ASSET_USE_INTERMEDIATE",
        "ASSET_USE_PROJECT"
      ],
      "default": "ASSET_USE_UNDEFINED",
      "description": "AssetUse defines how the asset is used within a project.  This enum matches\nthe values the project proto.\n\n - ASSET_USE_UNDEFINED: Asset does not have use defined\n - ASSET_USE_INPUT: Asset is used as an input for the project\n - ASSET_USE_OUTPUT: Asset is an output from the project\n - ASSET_USE_INTERMEDIATE: Asset is an output from an intermediate step of the project\n - ASSET_USE_PROJECT: Asset is used as the project file for the project"
    },
    "AsyncAnswer": {
      "type": "object",
      "properties": {
        "answer": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Answer"
          },
          "description": "Any completed Answers that have not been returned by a previous call to AsyncResult."
        },
        "complete": {
          "type": "boolean",
          "description": "Is this AsyncGenerate request complete? \n(Once true, any further requests will give an error)."
        },
        "status": {
          "$ref": "#/definitions/AsyncStatus",
          "description": "Final status. Only set when complete == True."
        }
      },
      "description": "A potentially partial answer to an AsyncGenerate request, returned by AsyncResult."
    },
    "AsyncCancelAnswer": {
      "type": "object"
    },
    "AsyncHandle": {
      "type": "object",
      "properties": {
        "requestId": {
          "type": "string",
          "description": "The request_id for the original Request."
        },
        "asyncHandle": {
          "type": "string",
          "description": "The opaque handle needed to refer to the same AsyncGenerate request."
        }
      },
      "description": "A handle to refer to a AsyncGenerate request."
    },
    "AsyncStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "title": "The status code, which should be an enum value of google.rpc.Code"
        },
        "message": {
          "type": "string",
          "title": "Any message"
        }
      },
      "description": "The status of an async job. \nMirrors google.rpc.Status but avoids needing to include that file in the repo."
    },
    "AttributeType": {
      "type": "string",
      "enum": [
        "AT_PARAMETER",
        "AT_BUFFER"
      ],
      "default": "AT_PARAMETER"
    },
    "BackgroundRemovalMode": {
      "type": "string",
      "enum": [
        "ALPHA",
        "SOLID",
        "BLUR",
        "NOTHING"
      ],
      "default": "ALPHA",
      "title": "- ALPHA: Apply to alpha channel\n - SOLID: Matte over a solid color\n - BLUR: Matte over a blurred version of the input\n - NOTHING: Don't do anything, just remember it for later"
    },
    "CacheControl": {
      "type": "object",
      "properties": {
        "cacheId": {
          "type": "string",
          "title": "The ID to store it under"
        },
        "maxAge": {
          "type": "integer",
          "format": "int64",
          "title": "If \u003e 0, the number of seconds before it self-purges from cache"
        },
        "stage": {
          "$ref": "#/definitions/ArtifactStage",
          "title": "Only for artifacts that use adjustments / postAdjustments"
        }
      }
    },
    "ChannelSource": {
      "type": "string",
      "enum": [
        "CHANNEL_R",
        "CHANNEL_G",
        "CHANNEL_B",
        "CHANNEL_A",
        "CHANNEL_ZERO",
        "CHANNEL_ONE",
        "CHANNEL_DISCARD"
      ],
      "default": "CHANNEL_R"
    },
    "ChurnSettings": {
      "type": "object",
      "properties": {
        "churn": {
          "type": "number",
          "format": "float"
        },
        "churnTmin": {
          "type": "number",
          "format": "float"
        },
        "churnTmax": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "ClassifierCategory": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "concepts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClassifierConcept"
          }
        },
        "adjustment": {
          "type": "number",
          "format": "float"
        },
        "action": {
          "$ref": "#/definitions/Action"
        },
        "classifierMode": {
          "$ref": "#/definitions/ClassifierMode"
        }
      }
    },
    "ClassifierConcept": {
      "type": "object",
      "properties": {
        "concept": {
          "type": "string"
        },
        "threshold": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "ClassifierMode": {
      "type": "string",
      "enum": [
        "CLSFR_MODE_ZEROSHOT",
        "CLSFR_MODE_MULTICLASS"
      ],
      "default": "CLSFR_MODE_ZEROSHOT",
      "description": "Classifier Mode.\n\n - CLSFR_MODE_MULTICLASS: CLSFR_MODE_ODDSRATIO = 2;"
    },
    "ClassifierParameters": {
      "type": "object",
      "properties": {
        "categories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClassifierCategory"
          }
        },
        "exceeds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClassifierCategory"
          }
        },
        "realizedAction": {
          "$ref": "#/definitions/Action"
        }
      }
    },
    "ConditionerParameters": {
      "type": "object",
      "properties": {
        "vectorAdjustPrior": {
          "type": "string"
        },
        "conditioner": {
          "$ref": "#/definitions/Model"
        }
      },
      "description": "Unused, but reserved for future use. Adjustments to the latents after\ninitialization."
    },
    "CutoutParameters": {
      "type": "object",
      "properties": {
        "cutouts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CutoutParameters"
          },
          "title": "Nested cutouts, unsupported"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "title": "0 to n, usually 8 to 32, 0 inner"
        },
        "gray": {
          "type": "number",
          "format": "float",
          "title": "0.0 to 1.0, defaults to 0.2"
        },
        "blur": {
          "type": "number",
          "format": "float",
          "title": "percentage of cutouts to blur"
        },
        "sizePower": {
          "type": "number",
          "format": "float",
          "title": "defaults to inner: 0.5, outer: 0.0"
        }
      }
    },
    "DiffusionSampler": {
      "type": "string",
      "enum": [
        "SAMPLER_DDIM",
        "SAMPLER_DDPM",
        "SAMPLER_K_EULER",
        "SAMPLER_K_EULER_ANCESTRAL",
        "SAMPLER_K_HEUN",
        "SAMPLER_K_DPM_2",
        "SAMPLER_K_DPM_2_ANCESTRAL",
        "SAMPLER_K_LMS",
        "SAMPLER_K_DPMPP_2S_ANCESTRAL",
        "SAMPLER_K_DPMPP_2M",
        "SAMPLER_K_DPMPP_SDE",
        "SAMPLER_DPMSOLVERPP_1ORDER",
        "SAMPLER_DPMSOLVERPP_2ORDER",
        "SAMPLER_DPMSOLVERPP_3ORDER",
        "SAMPLER_DPM_FAST",
        "SAMPLER_DPM_ADAPTIVE",
        "SAMPLER_DPMSOLVERPP_2S_ANCESTRAL",
        "SAMPLER_DPMSOLVERPP_SDE",
        "SAMPLER_DPMSOLVERPP_2M"
      ],
      "default": "SAMPLER_DDIM",
      "description": "DiffusionSampler identifies which sampler to use for Diffusion, and represents\nthe internal set of supported samplers.\n\n - SAMPLER_DPMSOLVERPP_2S_ANCESTRAL: Next three deprecated - use the official values above"
    },
    "Dtype": {
      "type": "string",
      "enum": [
        "DT_INVALID",
        "DT_FLOAT32",
        "DT_FLOAT64",
        "DT_FLOAT16",
        "DT_BFLOAT16",
        "DT_COMPLEX32",
        "DT_COMPLEX64",
        "DT_COMPLEX128",
        "DT_UINT8",
        "DT_INT8",
        "DT_INT16",
        "DT_INT32",
        "DT_INT64",
        "DT_BOOL",
        "DT_QUINT8",
        "DT_QINT8",
        "DT_QINT32",
        "DT_QUINT4_2"
      ],
      "default": "DT_INVALID"
    },
    "EngineHintImageType": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "provider": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "EngineInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "ready": {
          "type": "boolean"
        },
        "type": {
          "$ref": "#/definitions/EngineType"
        },
        "tokenizer": {
          "$ref": "#/definitions/EngineTokenizer"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "supportedSamplers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EngineSampler"
          }
        },
        "acceptedPromptArtifacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArtifactType"
          }
        },
        "acceptedHintTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EngineHintImageType"
          }
        },
        "task": {
          "type": "string"
        }
      },
      "title": "Engine info struct"
    },
    "EngineSampler": {
      "type": "object",
      "properties": {
        "sampler": {
          "$ref": "#/definitions/DiffusionSampler"
        },
        "supportsEta": {
          "type": "boolean"
        },
        "supportsChurn": {
          "type": "boolean"
        },
        "supportsSigmaLimits": {
          "type": "boolean"
        },
        "supportsKarrasRho": {
          "type": "boolean"
        },
        "supportedNoiseTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SamplerNoiseType"
          }
        }
      }
    },
    "EngineTaskGroup": {
      "type": "string",
      "enum": [
        "GENERATE",
        "UPSCALE",
        "UTILITY",
        "HINTER"
      ],
      "default": "GENERATE"
    },
    "EngineTokenizer": {
      "type": "string",
      "enum": [
        "GPT2",
        "PILE"
      ],
      "default": "GPT2"
    },
    "EngineType": {
      "type": "string",
      "enum": [
        "TEXT",
        "PICTURE",
        "AUDIO",
        "VIDEO",
        "CLASSIFICATION",
        "STORAGE"
      ],
      "default": "TEXT",
      "title": "Possible engine type"
    },
    "Engines": {
      "type": "object",
      "properties": {
        "engine": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EngineInfo"
          }
        }
      },
      "title": "Engine info list"
    },
    "ExtendedParameter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "float": {
          "type": "number",
          "format": "float"
        },
        "int": {
          "type": "string",
          "format": "uint64"
        },
        "str": {
          "type": "string"
        }
      }
    },
    "ExtendedParameters": {
      "type": "object",
      "properties": {
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtendedParameter"
          }
        }
      }
    },
    "FinishReason": {
      "type": "string",
      "enum": [
        "NULL",
        "LENGTH",
        "STOP",
        "ERROR",
        "FILTER"
      ],
      "default": "NULL"
    },
    "GaussianDirection": {
      "type": "string",
      "enum": [
        "DIRECTION_NONE",
        "DIRECTION_UP",
        "DIRECTION_DOWN"
      ],
      "default": "DIRECTION_NONE"
    },
    "GuidanceInstanceParameters": {
      "type": "object",
      "properties": {
        "models": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Model"
          },
          "title": "models to use for this set"
        },
        "guidanceStrength": {
          "type": "number",
          "format": "float",
          "title": "0.0 to 1.0, usually 0.05 to 0.225"
        },
        "schedule": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GuidanceScheduleParameters"
          },
          "title": "when to apply guidance"
        },
        "cutouts": {
          "$ref": "#/definitions/CutoutParameters",
          "title": "cutout parameters"
        },
        "prompt": {
          "$ref": "#/definitions/Prompt",
          "title": "prompt to use for guidance"
        }
      },
      "description": "Parameters that affect the behavior of the guidance, typically used for CLIP.\nWe can specify more than one model, and the guidance will be a weighted sum\nof the models."
    },
    "GuidanceParameters": {
      "type": "object",
      "properties": {
        "guidancePreset": {
          "$ref": "#/definitions/GuidancePreset",
          "title": "base preset for guidance"
        },
        "instances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GuidanceInstanceParameters"
          },
          "title": "guidance instances"
        }
      },
      "description": "Parameters that affect the behavior of the guidance, typically used for CLIP.\nThe omission of this field implies the default guidance of CFG."
    },
    "GuidancePreset": {
      "type": "string",
      "enum": [
        "GUIDANCE_PRESET_NONE",
        "GUIDANCE_PRESET_SIMPLE",
        "GUIDANCE_PRESET_FAST_BLUE",
        "GUIDANCE_PRESET_FAST_GREEN",
        "GUIDANCE_PRESET_SLOW",
        "GUIDANCE_PRESET_SLOWER",
        "GUIDANCE_PRESET_SLOWEST"
      ],
      "default": "GUIDANCE_PRESET_NONE",
      "description": "Presets for CLIP guidance."
    },
    "GuidanceScheduleParameters": {
      "type": "object",
      "properties": {
        "duration": {
          "type": "number",
          "format": "float"
        },
        "value": {
          "type": "number",
          "format": "float"
        }
      },
      "description": "GuidanceScheduleParameters are used to define a schedule for CLIP guidance, and\nare used to define the behavior of the guidance over time. They are relative\nto the total number of steps, and are scaled to the number of steps in the\ncurrent run."
    },
    "HintPriority": {
      "type": "string",
      "enum": [
        "HINT_BALANCED",
        "HINT_PRIORITISE_PROMPT",
        "HINT_PRIORITISE_HINT",
        "HINT_ADAPTIVE"
      ],
      "default": "HINT_BALANCED"
    },
    "HiresFixParameters": {
      "type": "object",
      "properties": {
        "enable": {
          "type": "boolean",
          "title": "Should it be enabled at all"
        },
        "oosFraction": {
          "type": "number",
          "format": "float",
          "title": "How out-of-square will we allow the fixed area to be, 0...1"
        }
      },
      "description": "Parameters that control the hires fix feature."
    },
    "ImageAdjustment": {
      "type": "object",
      "properties": {
        "blur": {
          "$ref": "#/definitions/ImageAdjustment_Gaussian"
        },
        "invert": {
          "$ref": "#/definitions/ImageAdjustment_Invert"
        },
        "levels": {
          "$ref": "#/definitions/ImageAdjustment_Levels"
        },
        "channels": {
          "$ref": "#/definitions/ImageAdjustment_Channels"
        },
        "rescale": {
          "$ref": "#/definitions/ImageAdjustment_Rescale"
        },
        "crop": {
          "$ref": "#/definitions/ImageAdjustment_Crop"
        },
        "depth": {
          "$ref": "#/definitions/ImageAdjustment_Depth"
        },
        "cannyEdge": {
          "$ref": "#/definitions/ImageAdjustment_CannyEdge"
        },
        "edgeDetection": {
          "$ref": "#/definitions/ImageAdjustment_EdgeDetection"
        },
        "segmentation": {
          "$ref": "#/definitions/ImageAdjustment_Segmentation"
        },
        "keypose": {
          "$ref": "#/definitions/ImageAdjustment_Keypose"
        },
        "openpose": {
          "$ref": "#/definitions/ImageAdjustment_Openpose"
        },
        "normal": {
          "$ref": "#/definitions/ImageAdjustment_Normal"
        },
        "backgroundRemoval": {
          "$ref": "#/definitions/ImageAdjustment_BackgroundRemoval"
        },
        "autoscale": {
          "$ref": "#/definitions/ImageAdjustment_Autoscale"
        },
        "palletize": {
          "$ref": "#/definitions/ImageAdjustment_Palletize"
        },
        "quantize": {
          "$ref": "#/definitions/ImageAdjustment_Quantize"
        },
        "shuffle": {
          "$ref": "#/definitions/ImageAdjustment_Shuffle"
        },
        "maskPredict": {
          "$ref": "#/definitions/ImageAdjustment_MaskPredict"
        },
        "maskReuse": {
          "$ref": "#/definitions/ImageAdjustment_MaskReuse"
        },
        "maskSoftDilate": {
          "$ref": "#/definitions/ImageAdjustment_MaskSoftDilate"
        },
        "engineId": {
          "type": "string"
        }
      }
    },
    "ImageAdjustment_Autoscale": {
      "type": "object",
      "properties": {
        "height": {
          "type": "string",
          "format": "uint64"
        },
        "width": {
          "type": "string",
          "format": "uint64"
        },
        "mode": {
          "$ref": "#/definitions/RescaleMode"
        }
      },
      "title": "Resize the image in a more clever way. \nIf either width or height are missing, will calculate the right value to maintain aspect ratio\nIf both are missing, will use the target size of the generation"
    },
    "ImageAdjustment_BackgroundRemoval": {
      "type": "object",
      "properties": {
        "mode": {
          "$ref": "#/definitions/BackgroundRemovalMode"
        },
        "reapply": {
          "type": "boolean",
          "title": "Don't recalculate, reapply the most recently calculated background within this adjustment list"
        }
      }
    },
    "ImageAdjustment_CannyEdge": {
      "type": "object",
      "properties": {
        "lowThreshold": {
          "type": "number",
          "format": "float"
        },
        "highThreshold": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "ImageAdjustment_Channels": {
      "type": "object",
      "properties": {
        "r": {
          "$ref": "#/definitions/ChannelSource"
        },
        "g": {
          "$ref": "#/definitions/ChannelSource"
        },
        "b": {
          "$ref": "#/definitions/ChannelSource"
        },
        "a": {
          "$ref": "#/definitions/ChannelSource"
        }
      }
    },
    "ImageAdjustment_Crop": {
      "type": "object",
      "properties": {
        "top": {
          "type": "string",
          "format": "uint64"
        },
        "left": {
          "type": "string",
          "format": "uint64"
        },
        "width": {
          "type": "string",
          "format": "uint64"
        },
        "height": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "ImageAdjustment_Depth": {
      "type": "object",
      "properties": {
        "depthEngineHint": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "You can provide a list of depth engine ID preferences, first match will be used,\nor default engine if no match"
        }
      }
    },
    "ImageAdjustment_EdgeDetection": {
      "type": "object"
    },
    "ImageAdjustment_Gaussian": {
      "type": "object",
      "properties": {
        "sigma": {
          "type": "number",
          "format": "float"
        },
        "direction": {
          "$ref": "#/definitions/GaussianDirection"
        }
      }
    },
    "ImageAdjustment_Invert": {
      "type": "object"
    },
    "ImageAdjustment_Keypose": {
      "type": "object"
    },
    "ImageAdjustment_Levels": {
      "type": "object",
      "properties": {
        "inputLow": {
          "type": "number",
          "format": "float"
        },
        "inputHigh": {
          "type": "number",
          "format": "float"
        },
        "outputLow": {
          "type": "number",
          "format": "float"
        },
        "outputHigh": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "ImageAdjustment_MaskPredict": {
      "type": "object",
      "properties": {
        "behaviour": {
          "$ref": "#/definitions/MaskPredictBehaviour"
        },
        "mode": {
          "$ref": "#/definitions/MaskPredictMode"
        },
        "prompt": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Prompt"
          }
        },
        "erode": {
          "type": "string",
          "format": "uint64",
          "title": "How much to erode mask to generate undermask"
        },
        "dilate": {
          "type": "string",
          "format": "uint64",
          "title": "How much to dilate mask to generate overmask"
        }
      },
      "title": "Predict a mask. Support for all these arguments (except behaviour) depends on the engine used"
    },
    "ImageAdjustment_MaskReuse": {
      "type": "object",
      "properties": {
        "behaviour": {
          "$ref": "#/definitions/MaskPredictBehaviour"
        }
      },
      "title": "Reuse the most recently predicted mask"
    },
    "ImageAdjustment_MaskSoftDilate": {
      "type": "object",
      "properties": {
        "sigma": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "ImageAdjustment_Normal": {
      "type": "object",
      "properties": {
        "backgroundThreshold": {
          "type": "number",
          "format": "float",
          "title": "0 .. 1, the higher the more background is removed. -1 == automatic"
        },
        "preblur": {
          "type": "integer",
          "format": "int64",
          "description": "Must be an odd integer if supplied. How much to blur depth map before calculating normal map: Recommended: 0",
          "title": "These next three only have any affect when using a depth engine (and then estimating a normal from that)"
        },
        "postblur": {
          "type": "integer",
          "format": "int64",
          "title": "Must be an odd integer if supplied. How much to blur normal map. Recommended: 5"
        },
        "smoothing": {
          "type": "number",
          "format": "float",
          "title": "Normal range 0..1. The higher the smoother. Recoomened: 0.8"
        }
      }
    },
    "ImageAdjustment_Openpose": {
      "type": "object"
    },
    "ImageAdjustment_Palletize": {
      "type": "object",
      "properties": {
        "colours": {
          "type": "integer",
          "format": "int64",
          "title": "Number of colours in one dimension (so total colours = colours * colours)"
        }
      }
    },
    "ImageAdjustment_Quantize": {
      "type": "object",
      "properties": {
        "threshold": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "float"
          },
          "title": "0..1 linearly divided into len(threshold)+1 points, then numbers rounded to those\npoints based on thresholds"
        }
      },
      "title": "Quantize the image"
    },
    "ImageAdjustment_Rescale": {
      "type": "object",
      "properties": {
        "height": {
          "type": "string",
          "format": "uint64"
        },
        "width": {
          "type": "string",
          "format": "uint64"
        },
        "mode": {
          "$ref": "#/definitions/RescaleMode"
        },
        "algorithmHint": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "Resize the image. The mode specifies what will happen if the aspect ratio"
    },
    "ImageAdjustment_Segmentation": {
      "type": "object"
    },
    "ImageAdjustment_Shuffle": {
      "type": "object"
    },
    "ImageParameters": {
      "type": "object",
      "properties": {
        "height": {
          "type": "string",
          "format": "uint64"
        },
        "width": {
          "type": "string",
          "format": "uint64"
        },
        "seed": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "samples": {
          "type": "string",
          "format": "uint64"
        },
        "steps": {
          "type": "string",
          "format": "uint64"
        },
        "transform": {
          "$ref": "#/definitions/TransformType"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StepParameter"
          }
        },
        "maskedAreaInit": {
          "$ref": "#/definitions/MaskedAreaInit",
          "title": "defaults to MASKED_AREA_INIT_ZERO"
        },
        "weightMethod": {
          "$ref": "#/definitions/WeightMethod",
          "title": "defaults to TEXT_ENCODER"
        },
        "quantize": {
          "type": "boolean",
          "title": "defaults to true"
        },
        "extension": {
          "$ref": "#/definitions/ExtendedParameters"
        },
        "hires": {
          "$ref": "#/definitions/HiresFixParameters"
        },
        "tiling": {
          "type": "boolean"
        },
        "tilingX": {
          "type": "boolean",
          "title": "The specific axis override tiling if both set"
        },
        "tilingY": {
          "type": "boolean"
        }
      }
    },
    "InpaintFillMode": {
      "type": "string",
      "enum": [
        "INPAINT_FILL_AUTO",
        "INPAINT_FILL_NONE",
        "INPAINT_FILL_SHUFFLE",
        "INPAINT_FILL_REPEAT",
        "INPAINT_FILL_AI",
        "INPAINT_FILL_NOISE"
      ],
      "default": "INPAINT_FILL_AUTO"
    },
    "InpaintParameters": {
      "type": "object",
      "properties": {
        "fillMode": {
          "$ref": "#/definitions/InpaintFillMode"
        }
      }
    },
    "LOIPoint": {
      "type": "object",
      "properties": {
        "x": {
          "type": "string",
          "format": "uint64"
        },
        "y": {
          "type": "string",
          "format": "uint64"
        },
        "label": {
          "$ref": "#/definitions/LOIPointLabel"
        }
      }
    },
    "LOIPointLabel": {
      "type": "string",
      "enum": [
        "POINT_BACKGROUND",
        "POINT_FOREGROUND"
      ],
      "default": "POINT_BACKGROUND"
    },
    "LOIRectangle": {
      "type": "object",
      "properties": {
        "top": {
          "type": "string",
          "format": "uint64"
        },
        "left": {
          "type": "string",
          "format": "uint64"
        },
        "bottom": {
          "type": "string",
          "format": "uint64"
        },
        "right": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "LocationsOfInterest": {
      "type": "object",
      "properties": {
        "points": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LOIPoint"
          }
        },
        "rectangles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LOIRectangle"
          }
        }
      }
    },
    "Lora": {
      "type": "object",
      "properties": {
        "lora": {
          "$ref": "#/definitions/Safetensors"
        },
        "weights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LoraWeight"
          }
        }
      }
    },
    "LoraWeight": {
      "type": "object",
      "properties": {
        "modelName": {
          "type": "string"
        },
        "weight": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "MaskPredictBehaviour": {
      "type": "string",
      "enum": [
        "MASK_AS_ALPHA",
        "MASK_OVER_SOLID",
        "MASK_OVER_BLUR",
        "MASK_DO_NOTHING",
        "MASK_USE"
      ],
      "default": "MASK_AS_ALPHA",
      "title": "- MASK_AS_ALPHA: Apply to alpha channel\n - MASK_OVER_SOLID: Matte over a solid color\n - MASK_OVER_BLUR: Matte over a blurred version of the input\n - MASK_DO_NOTHING: Don't do anything, just remember it for later\n - MASK_USE: Result is mask"
    },
    "MaskPredictMode": {
      "type": "string",
      "enum": [
        "PREDICT_MATTE",
        "PREDICT_MASK",
        "PREDICT_OVERMASK",
        "PREDICT_UNDERMASK",
        "PREDICT_TRIMAP"
      ],
      "default": "PREDICT_MATTE",
      "title": "- PREDICT_MATTE: An \"as accurate as possible\" matte\n - PREDICT_MASK: An \"as accurate as possible\" binary mask\n - PREDICT_OVERMASK: A binary mask that covers at least the object, maybe a little more\n - PREDICT_UNDERMASK: A binary mask that covers at most the object, maybe a little less\n - PREDICT_TRIMAP: A trimap"
    },
    "MaskedAreaInit": {
      "type": "string",
      "enum": [
        "MASKED_AREA_INIT_ZERO",
        "MASKED_AREA_INIT_RANDOM",
        "MASKED_AREA_INIT_ORIGINAL"
      ],
      "default": "MASKED_AREA_INIT_ZERO"
    },
    "Model": {
      "type": "object",
      "properties": {
        "architecture": {
          "$ref": "#/definitions/ModelArchitecture"
        },
        "publisher": {
          "type": "string"
        },
        "dataset": {
          "type": "string"
        },
        "version": {
          "type": "number",
          "format": "float"
        },
        "semanticVersion": {
          "type": "string"
        },
        "alias": {
          "type": "string"
        }
      }
    },
    "ModelArchitecture": {
      "type": "string",
      "enum": [
        "MODEL_ARCHITECTURE_NONE",
        "MODEL_ARCHITECTURE_CLIP_VIT",
        "MODEL_ARCHITECTURE_CLIP_RESNET",
        "MODEL_ARCHITECTURE_LDM"
      ],
      "default": "MODEL_ARCHITECTURE_NONE"
    },
    "NamedWeight": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "weight": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "OnStatus": {
      "type": "object",
      "properties": {
        "reason": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FinishReason"
          }
        },
        "target": {
          "type": "string"
        },
        "action": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StageAction"
          }
        }
      }
    },
    "Prompt": {
      "type": "object",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/PromptParameters"
        },
        "text": {
          "type": "string"
        },
        "tokens": {
          "$ref": "#/definitions/Tokens"
        },
        "artifact": {
          "$ref": "#/definitions/Artifact"
        },
        "loi": {
          "$ref": "#/definitions/LocationsOfInterest"
        },
        "echoBack": {
          "type": "boolean"
        }
      },
      "description": "A Prompt is a special type of Artifact that is used to generate an output.\nThere can be multiple Prompts that affect the same output. Currently, the\nonly Prompts supported are:\n  - Text (singular)\n  - Init Image (singular, optional, type ARTIFACT_IMAGE, with init=true)\n  - Mask (singular, optional, Artifact type ARTIFACT_MASK)\n."
    },
    "PromptParameters": {
      "type": "object",
      "properties": {
        "init": {
          "type": "boolean"
        },
        "weight": {
          "type": "number",
          "format": "float"
        },
        "namedWeights": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NamedWeight"
          },
          "title": "For Lora / Lycoris, apply weights to different parts of the pipeline. Supported named: unet, text_encoder"
        },
        "tokenOverrides": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TokenOverride"
          },
          "title": "Override the token string inside a token_embedding"
        },
        "clipLayer": {
          "type": "integer",
          "format": "int64",
          "description": "0 _or_ 1 == final, 2 = penultimate, 3 = next",
          "title": "Specify the clip layer to use for text prompts and t2i/style hints"
        },
        "hintPriority": {
          "$ref": "#/definitions/HintPriority",
          "title": "Specify the application mode for hints"
        },
        "inpaintParameters": {
          "$ref": "#/definitions/InpaintParameters",
          "title": "Specify the inpaint controls for inpainting"
        }
      },
      "description": "A set of parameters for each individual Prompt."
    },
    "Request": {
      "type": "object",
      "properties": {
        "engineId": {
          "type": "string"
        },
        "requestId": {
          "type": "string"
        },
        "requestedType": {
          "$ref": "#/definitions/ArtifactType"
        },
        "prompt": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Prompt"
          }
        },
        "image": {
          "$ref": "#/definitions/ImageParameters"
        },
        "classifier": {
          "$ref": "#/definitions/ClassifierParameters"
        },
        "asset": {
          "$ref": "#/definitions/AssetParameters"
        },
        "conditioner": {
          "$ref": "#/definitions/ConditionerParameters"
        },
        "accept": {
          "type": "string",
          "description": "The accept header, in the same format as for http requests. Not guaranteed to be obeyed by server."
        }
      },
      "description": "A Request is a set of Artifacts, which can be of any type with model or\ntransform parameters. It is sent to the server, which will respond with an\nAnswer."
    },
    "RescaleMode": {
      "type": "string",
      "enum": [
        "RESCALE_STRICT",
        "RESCALE_COVER",
        "RESCALE_CONTAIN_ZERO",
        "RESCALE_CONTAIN_REPLICATE",
        "RESCALE_CONTAIN_REFLECT"
      ],
      "default": "RESCALE_STRICT",
      "title": "- RESCALE_COVER: Completely cover the rescale height and width, maintaining aspect ratio, cropping any extra\n - RESCALE_CONTAIN_ZERO: Fit the complete source image into the rescale height and width, maintaining aspect ratio, background to be filled with zeros\n - RESCALE_CONTAIN_REPLICATE: Fit the complete source image into the rescale height and width, maintaining aspect ratio, background to be filled with the edge of the image repeating\n - RESCALE_CONTAIN_REFLECT: Fit the complete source image into the rescale height and width, maintaining aspect ratio, background to be filled with the image mirrored"
    },
    "Safetensors": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SafetensorsMeta"
          }
        },
        "tensors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SafetensorsTensor"
          }
        }
      }
    },
    "SafetensorsMeta": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "SafetensorsTensor": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "tensor": {
          "$ref": "#/definitions/Tensor"
        }
      }
    },
    "SamplerNoiseType": {
      "type": "string",
      "enum": [
        "SAMPLER_NOISE_NORMAL",
        "SAMPLER_NOISE_BROWNIAN"
      ],
      "default": "SAMPLER_NOISE_NORMAL"
    },
    "SamplerParameters": {
      "type": "object",
      "properties": {
        "eta": {
          "type": "number",
          "format": "float"
        },
        "samplingSteps": {
          "type": "string",
          "format": "uint64"
        },
        "latentChannels": {
          "type": "string",
          "format": "uint64"
        },
        "downsamplingFactor": {
          "type": "string",
          "format": "uint64"
        },
        "cfgScale": {
          "type": "number",
          "format": "float"
        },
        "initNoiseScale": {
          "type": "number",
          "format": "float",
          "title": "defaults to 0.99"
        },
        "stepNoiseScale": {
          "type": "number",
          "format": "float",
          "title": "defaults to 0.99"
        },
        "churn": {
          "$ref": "#/definitions/ChurnSettings"
        },
        "sigma": {
          "$ref": "#/definitions/SigmaParameters"
        },
        "noiseType": {
          "$ref": "#/definitions/SamplerNoiseType"
        }
      },
      "description": "Parameters that affect the behavior of the sampler, typically used for CFG."
    },
    "ScheduleParameters": {
      "type": "object",
      "properties": {
        "start": {
          "type": "number",
          "format": "float",
          "title": "0.0 to 1.0"
        },
        "end": {
          "type": "number",
          "format": "float",
          "title": "0.0 to 1.0"
        },
        "value": {
          "type": "number",
          "format": "float",
          "title": "float value to apply on this schedule"
        }
      },
      "description": "When does this schedule definition apply?."
    },
    "SigmaParameters": {
      "type": "object",
      "properties": {
        "sigmaMin": {
          "type": "number",
          "format": "float"
        },
        "sigmaMax": {
          "type": "number",
          "format": "float"
        },
        "karrasRho": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "Stage": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "request": {
          "$ref": "#/definitions/Request"
        },
        "onStatus": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OnStatus"
          }
        }
      }
    },
    "StageAction": {
      "type": "string",
      "enum": [
        "STAGE_ACTION_PASS",
        "STAGE_ACTION_DISCARD",
        "STAGE_ACTION_RETURN"
      ],
      "default": "STAGE_ACTION_PASS"
    },
    "Status": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Any"
          }
        }
      }
    },
    "StepParameter": {
      "type": "object",
      "properties": {
        "scaledStep": {
          "type": "number",
          "format": "float"
        },
        "sampler": {
          "$ref": "#/definitions/SamplerParameters"
        },
        "schedule": {
          "$ref": "#/definitions/ScheduleParameters"
        },
        "guidance": {
          "$ref": "#/definitions/GuidanceParameters"
        }
      },
      "description": "Parameters that apply to this block of the schedule."
    },
    "Tensor": {
      "type": "object",
      "properties": {
        "dtype": {
          "$ref": "#/definitions/Dtype"
        },
        "shape": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "data": {
          "type": "string",
          "format": "byte"
        },
        "attrType": {
          "$ref": "#/definitions/AttributeType"
        }
      }
    },
    "Token": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      },
      "description": "Generally, a GPT BPE 16-bit token, paired with an optional string representation."
    },
    "TokenEmbedding": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string"
        },
        "tensor": {
          "$ref": "#/definitions/Tensor"
        }
      }
    },
    "TokenOverride": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "originalToken": {
          "type": "string"
        }
      }
    },
    "Tokens": {
      "type": "object",
      "properties": {
        "tokens": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Token"
          }
        },
        "tokenizerId": {
          "type": "string"
        }
      },
      "description": "Sequence of tokens, paired with the id of the tokenizer used to generate them."
    },
    "TransformType": {
      "type": "object",
      "properties": {
        "diffusion": {
          "$ref": "#/definitions/DiffusionSampler"
        },
        "upscaler": {
          "$ref": "#/definitions/Upscaler"
        }
      }
    },
    "Upscaler": {
      "type": "string",
      "enum": [
        "UPSCALER_RGB",
        "UPSCALER_GFPGAN",
        "UPSCALER_ESRGAN"
      ],
      "default": "UPSCALER_RGB",
      "description": "Future, unimplemented."
    },
    "WeightMethod": {
      "type": "string",
      "enum": [
        "TEXT_ENCODER",
        "CROSS_ATTENTION"
      ],
      "default": "TEXT_ENCODER"
    }
  }
}
